version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: urlshortener-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-urlshortener}
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - urlshortener-network
    restart: unless-stopped

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: urlshortener-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - urlshortener-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Backend Service
  backend:
    build:
      context: ./backend/url-service
      dockerfile: Dockerfile
    container_name: urlshortener-backend
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-urlshortener}
      - POSTGRES_USER=${POSTGRES_USER:-admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - REDIS_URL=redis://redis:6379
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key_here}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
    networks:
      - urlshortener-network
    restart: unless-stopped
    volumes:
      - ./uploads:/app/uploads

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: urlshortener-frontend
    environment:
      - REACT_APP_API_URL=${API_URL:-http://localhost:8080}
      - REACT_APP_GOOGLE_CLIENT_ID=${REACT_APP_GOOGLE_CLIENT_ID}
      - REACT_APP_GOOGLE_REDIRECT_URI=${REACT_APP_GOOGLE_REDIRECT_URI}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - urlshortener-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: urlshortener-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - urlshortener-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  urlshortener-network:
    driver: bridge